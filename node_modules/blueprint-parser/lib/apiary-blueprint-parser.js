module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "API": parse_API,
        "Location": parse_Location,
        "APIName": parse_APIName,
        "APIDescription": parse_APIDescription,
        "APIDescriptionLine": parse_APIDescriptionLine,
        "Sections": parse_Sections,
        "Section": parse_Section,
        "SectionHeader": parse_SectionHeader,
        "SectionHeaderShort": parse_SectionHeaderShort,
        "SectionHeaderLong": parse_SectionHeaderLong,
        "SectionHeaderLongLine": parse_SectionHeaderLongLine,
        "Resources": parse_Resources,
        "Resource": parse_Resource,
        "ResourceDescription": parse_ResourceDescription,
        "ResourceDescriptionLine": parse_ResourceDescriptionLine,
        "HttpMethod": parse_HttpMethod,
        "Request": parse_Request,
        "RequestHeaders": parse_RequestHeaders,
        "RequestHeader": parse_RequestHeader,
        "Responses": parse_Responses,
        "Response": parse_Response,
        "ResponseStatus": parse_ResponseStatus,
        "ResponseHeaders": parse_ResponseHeaders,
        "ResponseHeader": parse_ResponseHeader,
        "ResponseSeparator": parse_ResponseSeparator,
        "HttpStatus": parse_HttpStatus,
        "HttpHeader": parse_HttpHeader,
        "HttpHeaderName": parse_HttpHeaderName,
        "JsonSchemaValidations": parse_JsonSchemaValidations,
        "JsonSchemaValidation": parse_JsonSchemaValidation,
        "Signature": parse_Signature,
        "Body": parse_Body,
        "DelimitedBodyFixed": parse_DelimitedBodyFixed,
        "DelimitedBodyFixedLine": parse_DelimitedBodyFixedLine,
        "DelimitedBodyVariable": parse_DelimitedBodyVariable,
        "DelimitedBodyVariableLine": parse_DelimitedBodyVariableLine,
        "DelimitedBodyVariableTerminator": parse_DelimitedBodyVariableTerminator,
        "SimpleBody": parse_SimpleBody,
        "SimpleBodyLine": parse_SimpleBodyLine,
        "In": parse_In,
        "Out": parse_Out,
        "Text0": parse_Text0,
        "Text1": parse_Text1,
        "NonEOL": parse_NonEOL,
        "EmptyLine": parse_EmptyLine,
        "EOLF": parse_EOLF,
        "EOL": parse_EOL,
        "EOF": parse_EOF,
        "S": parse_S
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "API";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_API() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_EmptyLine();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_EmptyLine();
        }
        if (result0 !== null) {
          result1 = parse_Location();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = [];
            result3 = parse_EmptyLine();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_EmptyLine();
            }
            if (result2 !== null) {
              result3 = parse_APIName();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = [];
                result5 = parse_EmptyLine();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_EmptyLine();
                }
                if (result4 !== null) {
                  result5 = parse_APIDescription();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_EmptyLine();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_EmptyLine();
                    }
                    if (result6 !== null) {
                      result7 = parse_Resources();
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_EmptyLine();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_EmptyLine();
                        }
                        if (result8 !== null) {
                          result9 = parse_Sections();
                          if (result9 !== null) {
                            result10 = [];
                            result11 = parse_EmptyLine();
                            while (result11 !== null) {
                              result10.push(result11);
                              result11 = parse_EmptyLine();
                            }
                            if (result10 !== null) {
                              result11 = parse_JsonSchemaValidations();
                              result11 = result11 !== null ? result11 : "";
                              if (result11 !== null) {
                                result12 = [];
                                result13 = parse_EmptyLine();
                                while (result13 !== null) {
                                  result12.push(result13);
                                  result13 = parse_EmptyLine();
                                }
                                if (result12 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, location, name, description, resources, sections, validations) {
              /* Wrap free-standing resources into an anonymnous section. */
              if (resources.length > 0) {
                sections.unshift(new Section({
                  name:        null,
                  description: null,
                  resources:   resources
                }));
              }
        
              return new Blueprint({
                location:    nullIfEmpty(location),
                name:        nullIfEmpty(name),
                description: nullIfEmpty(description),
                sections:    sections,
                validations: validations !== "" ? validations : []
              });
            })(pos0, result0[1], result0[3], result0[5], result0[7], result0[9], result0[11]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Location() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5) === "HOST:") {
          result0 = "HOST:";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"HOST:\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_Text0();
            if (result2 !== null) {
              result3 = parse_EOLF();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, url) { return url; })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_APIName() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "---") {
          result0 = "---";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"---\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_S();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_S();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Text1();
            if (result2 !== null) {
              result3 = parse_EOLF();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, name) {
              return name.replace(/\s+---$/, "");
            })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_APIDescription() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "---") {
          result0 = "---";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"---\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_EOL();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_APIDescriptionLine();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_APIDescriptionLine();
              }
              if (result3 !== null) {
                if (input.substr(pos, 3) === "---") {
                  result4 = "---";
                  pos += 3;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"---\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_S();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_S();
                  }
                  if (result5 !== null) {
                    result6 = parse_EOLF();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, lines) {
            return lines.join("\n");
          })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_APIDescriptionLine() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        pos3 = pos;
        if (input.substr(pos, 3) === "---") {
          result0 = "---";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"---\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_EOLF();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos3;
            }
          } else {
            result0 = null;
            pos = pos3;
          }
        } else {
          result0 = null;
          pos = pos3;
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_Text0();
          if (result1 !== null) {
            result2 = parse_EOL();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, text) { return text; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Sections() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Section();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          result2 = [];
          result3 = parse_EmptyLine();
          while (result3 !== null) {
            result2.push(result3);
            result3 = parse_EmptyLine();
          }
          if (result2 !== null) {
            result3 = parse_Section();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos3;
            }
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result2 = (function(offset, section) { return section; })(pos2, result2[1]);
          }
          if (result2 === null) {
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            result2 = [];
            result3 = parse_EmptyLine();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_EmptyLine();
            }
            if (result2 !== null) {
              result3 = parse_Section();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result2 = (function(offset, section) { return section; })(pos2, result2[1]);
            }
            if (result2 === null) {
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              return combineHeadTail(head, tail);
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Section() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_SectionHeader();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_EmptyLine();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_EmptyLine();
          }
          if (result1 !== null) {
            result2 = parse_Resources();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, header, resources) {
              return new Section({
                name:        nullIfEmpty(header.name),
                description: nullIfEmpty(header.description),
                resources:   resources
              });
            })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_SectionHeader() {
        var result0;
        
        result0 = parse_SectionHeaderLong();
        if (result0 === null) {
          result0 = parse_SectionHeaderShort();
        }
        return result0;
      }
      
      function parse_SectionHeaderShort() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_JsonSchemaValidations();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          if (input.substr(pos, 2) === "--") {
            result1 = "--";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"--\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_S();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_S();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse_Text1();
              if (result3 !== null) {
                result4 = parse_EOLF();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, name) {
              return {
                name:        name.replace(/\s+--$/, ""),
                description: ""
              };
            })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_SectionHeaderLong() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_JsonSchemaValidations();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          if (input.substr(pos, 2) === "--") {
            result1 = "--";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"--\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              result3 = parse_EOL();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_SectionHeaderLongLine();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_SectionHeaderLongLine();
                }
                if (result4 !== null) {
                  if (input.substr(pos, 2) === "--") {
                    result5 = "--";
                    pos += 2;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"--\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_S();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_S();
                    }
                    if (result6 !== null) {
                      result7 = parse_EOLF();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, lines) {
            return {
              name:        lines.length > 0 ? lines[0] : "",
              description: lines.slice(1).join("\n")
            };
          })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_SectionHeaderLongLine() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        pos3 = pos;
        if (input.substr(pos, 2) === "--") {
          result0 = "--";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"--\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_EOLF();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos3;
            }
          } else {
            result0 = null;
            pos = pos3;
          }
        } else {
          result0 = null;
          pos = pos3;
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_Text0();
          if (result1 !== null) {
            result2 = parse_EOL();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, text) { return text; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Resources() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Resource();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          result2 = [];
          result3 = parse_EmptyLine();
          while (result3 !== null) {
            result2.push(result3);
            result3 = parse_EmptyLine();
          }
          if (result2 !== null) {
            result3 = parse_Resource();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos3;
            }
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result2 = (function(offset, resource) { return resource; })(pos2, result2[1]);
          }
          if (result2 === null) {
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            result2 = [];
            result3 = parse_EmptyLine();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_EmptyLine();
            }
            if (result2 !== null) {
              result3 = parse_Resource();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result2 = (function(offset, resource) { return resource; })(pos2, result2[1]);
            }
            if (result2 === null) {
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              return combineHeadTail(head, tail);
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Resource() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_Section();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_JsonSchemaValidations();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = parse_ResourceDescription();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_Signature();
              if (result3 !== null) {
                result4 = parse_Request();
                if (result4 !== null) {
                  result5 = parse_Responses();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, description, signature, request, responses) {
              return new Resource({
                description: nullIfEmpty(description),
                method:      signature.method,
                url:         signature.url,
                request:     request,
                responses:   responses
              });
            })(pos0, result0[2], result0[3], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ResourceDescription() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result1 = parse_ResourceDescriptionLine();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ResourceDescriptionLine();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, lines) { return lines.join("\n"); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("resource description");
        }
        return result0;
      }
      
      function parse_ResourceDescriptionLine() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_HttpMethod();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_Text0();
          if (result1 !== null) {
            result2 = parse_EOL();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, text) { return text; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_HttpMethod() {
        var result0;
        
        if (input.substr(pos, 3) === "GET") {
          result0 = "GET";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"GET\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 4) === "POST") {
            result0 = "POST";
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"POST\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 3) === "PUT") {
              result0 = "PUT";
              pos += 3;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"PUT\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 6) === "DELETE") {
                result0 = "DELETE";
                pos += 6;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"DELETE\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 7) === "OPTIONS") {
                  result0 = "OPTIONS";
                  pos += 7;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"OPTIONS\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 5) === "PATCH") {
                    result0 = "PATCH";
                    pos += 5;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"PATCH\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 9) === "PROPPATCH") {
                      result0 = "PROPPATCH";
                      pos += 9;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"PROPPATCH\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 4) === "LOCK") {
                        result0 = "LOCK";
                        pos += 4;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"LOCK\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos, 6) === "UNLOCK") {
                          result0 = "UNLOCK";
                          pos += 6;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"UNLOCK\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos, 4) === "COPY") {
                            result0 = "COPY";
                            pos += 4;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"COPY\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos, 4) === "MOVE") {
                              result0 = "MOVE";
                              pos += 4;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"MOVE\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos, 6) === "DELETE") {
                                result0 = "DELETE";
                                pos += 6;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"DELETE\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos, 5) === "MKCOL") {
                                  result0 = "MKCOL";
                                  pos += 5;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"MKCOL\"");
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_Request() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_RequestHeaders();
        if (result0 !== null) {
          result1 = parse_Body();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, headers, body) {
              return new Request({
                headers: headers,
                body:    nullIfEmpty(body)
              });
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_RequestHeaders() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_RequestHeader();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_RequestHeader();
        }
        if (result0 !== null) {
          result0 = (function(offset, headers) { return convertHeaders(headers); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_RequestHeader() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_In();
        if (result0 !== null) {
          result1 = parse_HttpHeader();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, header) { return header; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Responses() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Response();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          result2 = parse_ResponseSeparator();
          if (result2 !== null) {
            result3 = parse_Response();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos3;
            }
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result2 = (function(offset, response) { return response; })(pos2, result2[1]);
          }
          if (result2 === null) {
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            result2 = parse_ResponseSeparator();
            if (result2 !== null) {
              result3 = parse_Response();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result2 = (function(offset, response) { return response; })(pos2, result2[1]);
            }
            if (result2 === null) {
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              return combineHeadTail(head, tail);
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Response() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_ResponseStatus();
        if (result0 !== null) {
          result1 = parse_ResponseHeaders();
          if (result1 !== null) {
            result2 = parse_Body();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, status, headers, body) {
              return new Response({
                status:  status,
                headers: headers,
                body:    nullIfEmpty(body)
              });
            })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ResponseStatus() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Out();
        if (result0 !== null) {
          result1 = parse_HttpStatus();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              result3 = parse_EOLF();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, status) { return status; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ResponseHeaders() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_ResponseHeader();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ResponseHeader();
        }
        if (result0 !== null) {
          result0 = (function(offset, headers) { return convertHeaders(headers); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ResponseHeader() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Out();
        if (result0 !== null) {
          result1 = parse_HttpHeader();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, header) { return header; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ResponseSeparator() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 5) === "+++++") {
          result0 = "+++++";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+++++\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_EOL();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_HttpStatus() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, digits) { return parseInt(digits.join(""), 10); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("HTTP status code");
        }
        return result0;
      }
      
      function parse_HttpHeader() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_HttpHeaderName();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 58) {
            result1 = ":";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\":\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_S();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_S();
            }
            if (result2 !== null) {
              result3 = parse_Text0();
              if (result3 !== null) {
                result4 = parse_EOLF();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, name, value) {
              return {
                name:  name,
                value: value
              };
            })(pos0, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_HttpHeaderName() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        if (/^[!-9;-~]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[!-9;-~]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[!-9;-~]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[!-9;-~]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) { return chars.join(""); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("HTTP header name");
        }
        return result0;
      }
      
      function parse_JsonSchemaValidations() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 29) === "-- JSON Schema Validations --") {
          result0 = "-- JSON Schema Validations --";
          pos += 29;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-- JSON Schema Validations --\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_EOLF();
          if (result1 !== null) {
            result2 = parse_JsonSchemaValidation();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = [];
              pos2 = pos;
              pos3 = pos;
              result4 = [];
              result5 = parse_EmptyLine();
              while (result5 !== null) {
                result4.push(result5);
                result5 = parse_EmptyLine();
              }
              if (result4 !== null) {
                result5 = parse_JsonSchemaValidation();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = pos3;
                }
              } else {
                result4 = null;
                pos = pos3;
              }
              if (result4 !== null) {
                result4 = (function(offset, validation) { return validation; })(pos2, result4[1]);
              }
              if (result4 === null) {
                pos = pos2;
              }
              while (result4 !== null) {
                result3.push(result4);
                pos2 = pos;
                pos3 = pos;
                result4 = [];
                result5 = parse_EmptyLine();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_EmptyLine();
                }
                if (result4 !== null) {
                  result5 = parse_JsonSchemaValidation();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = pos3;
                  }
                } else {
                  result4 = null;
                  pos = pos3;
                }
                if (result4 !== null) {
                  result4 = (function(offset, validation) { return validation; })(pos2, result4[1]);
                }
                if (result4 === null) {
                  pos = pos2;
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
              return combineHeadTail(head, tail);
            })(pos0, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_JsonSchemaValidation() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_Signature();
        if (result0 !== null) {
          result1 = parse_Body();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, signature, body) {
              return new JsonSchemaValidation({
                method: signature.method,
                url:    signature.url,
                body:   body
              });
            })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Signature() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_HttpMethod();
        if (result0 !== null) {
          result2 = parse_S();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_S();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_Text1();
            if (result2 !== null) {
              result3 = parse_EOL();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, method, url) {
              return {
                method: method,
                url:    url
              };
            })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Body() {
        var result0;
        
        result0 = parse_DelimitedBodyFixed();
        if (result0 === null) {
          result0 = parse_DelimitedBodyVariable();
          if (result0 === null) {
            result0 = parse_SimpleBody();
          }
        }
        return result0;
      }
      
      function parse_DelimitedBodyFixed() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "<<<") {
          result0 = "<<<";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<<<\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_EOL();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_DelimitedBodyFixedLine();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_DelimitedBodyFixedLine();
              }
              if (result3 !== null) {
                if (input.substr(pos, 3) === ">>>") {
                  result4 = ">>>";
                  pos += 3;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">>>\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_S();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_S();
                  }
                  if (result5 !== null) {
                    result6 = parse_EOLF();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, lines) {
              return lines.join("\n");
            })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DelimitedBodyFixedLine() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        pos3 = pos;
        if (input.substr(pos, 3) === ">>>") {
          result0 = ">>>";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\">>>\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_S();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_S();
          }
          if (result1 !== null) {
            result2 = parse_EOLF();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos3;
            }
          } else {
            result0 = null;
            pos = pos3;
          }
        } else {
          result0 = null;
          pos = pos3;
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_Text0();
          if (result1 !== null) {
            result2 = parse_EOL();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, text) { return text; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DelimitedBodyVariable() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "<<<") {
          result0 = "<<<";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<<<\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Text1();
          if (result1 !== null) {
            result2 = parse_EOL();
            if (result2 !== null) {
              result3 = (function(offset, terminator) { bodyTerminator = terminator; return true; })(pos, result1) ? "" : null;
              if (result3 !== null) {
                result4 = [];
                result5 = parse_DelimitedBodyVariableLine();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_DelimitedBodyVariableLine();
                }
                if (result4 !== null) {
                  result5 = parse_DelimitedBodyVariableTerminator();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, terminator, lines) {
              return lines.join("\n");
            })(pos0, result0[1], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DelimitedBodyVariableLine() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_DelimitedBodyVariableTerminator();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_Text0();
          if (result1 !== null) {
            result2 = parse_EOL();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, text) { return text; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_DelimitedBodyVariableTerminator() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_Text1();
        if (result0 !== null) {
          result1 = parse_EOLF();
          if (result1 !== null) {
            result2 = (function(offset, terminator) { return terminator === bodyTerminator })(pos, result0) ? "" : null;
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_SimpleBody() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (input.substr(pos, 3) === "<<<") {
          result0 = "<<<";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<<<\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result2 = parse_SimpleBodyLine();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_SimpleBodyLine();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, lines) { return lines.join("\n"); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_SimpleBodyLine() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_In();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_Out();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            result2 = parse_ResponseSeparator();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_EmptyLine();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 !== null) {
                result4 = parse_Text1();
                if (result4 !== null) {
                  result5 = parse_EOLF();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, text) { return text; })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_In() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 62) {
          result0 = ">";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\">\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_S();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_S();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Out() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 60) {
          result0 = "<";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_S();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_S();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_Text0() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_NonEOL();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_NonEOL();
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) { return chars.join(""); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("zero or more characters");
        }
        return result0;
      }
      
      function parse_Text1() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result1 = parse_NonEOL();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_NonEOL();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) { return chars.join(""); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("one or more characters");
        }
        return result0;
      }
      
      function parse_NonEOL() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        result0 = parse_EOL();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          if (input.length > pos) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, char) { return char; })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("line character");
        }
        return result0;
      }
      
      function parse_EmptyLine() {
        var result0, result1;
        var pos0;
        
        reportFailures++;
        pos0 = pos;
        result0 = [];
        result1 = parse_S();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_S();
        }
        if (result0 !== null) {
          result1 = parse_EOL();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("empty line");
        }
        return result0;
      }
      
      function parse_EOLF() {
        var result0;
        
        reportFailures++;
        result0 = parse_EOL();
        if (result0 === null) {
          result0 = parse_EOF();
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("end of line or file");
        }
        return result0;
      }
      
      function parse_EOL() {
        var result0;
        
        reportFailures++;
        if (input.charCodeAt(pos) === 10) {
          result0 = "\n";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 2) === "\r\n") {
            result0 = "\r\n";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 13) {
              result0 = "\r";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("end of line");
        }
        return result0;
      }
      
      function parse_EOF() {
        var result0;
        var pos0, pos1;
        
        reportFailures++;
        pos0 = pos;
        pos1 = pos;
        reportFailures++;
        if (input.length > pos) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return ""; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("end of file");
        }
        return result0;
      }
      
      function parse_S() {
        var result0;
        
        reportFailures++;
        if (/^[\t\x0B\f \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\t\\x0B\\f \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF]");
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
        /*
         * Converts headers from format like this:
         *
         *   [
         *     { name: "Content-Type",   value: "application/json" },
         *     { name: "Content-Length", value: "153"              }
         *   ]
         *
         * into format like this:
         *
         *   {
         *     "Content-Type":   "application/json",
         *     "Content-Length": "153"
         *   }
         */
        function convertHeaders(headers) {
          var result = {}, i;
      
          for (i = 0; i < headers.length; i++) {
            result[headers[i].name] = headers[i].value;
          }
      
          return result;
        }
      
        function nullIfEmpty(s) {
          return s !== "" ? s : null;
        }
      
        function combineHeadTail(head, tail) {
          if (head !== "") {
            tail.unshift(head);
          }
      
          return tail;
        }
      
        /*
         * We must save these because |this| doesn't refer to the parser in actions.
         */
        var Blueprint            = this.ast.Blueprint,
            Section              = this.ast.Section,
            Resource             = this.ast.Resource,
            Request              = this.ast.Request,
            Response             = this.ast.Response,
            JsonSchemaValidation = this.ast.JsonSchemaValidation;
      
        var bodyTerminator;
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();

module.exports.ast = require("./ast");
