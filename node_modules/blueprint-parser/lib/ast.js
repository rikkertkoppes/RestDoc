// Generated by CoffeeScript 1.4.0
var Blueprint, JsonSchemaValidation, Request, Resource, Response, Section, combineParts, escapeBody, fillProps;

fillProps = function(object, props, defaults) {
  var key, _results;
  _results = [];
  for (key in defaults) {
    _results.push(object[key] = props[key] || defaults[key]);
  }
  return _results;
};

combineParts = function(separator, builder) {
  var parts;
  parts = [];
  builder(parts);
  return parts.join(separator);
};

escapeBody = function(body) {
  var i;
  if (/^>\s+|^<\s+|^\s*$/m.test(body)) {
    if (/^>>>\s*$/m.test(body)) {
      if (/^EOT$/m.test(body)) {
        i = 1;
        while (/^EOT#{i}$/m.test(body)) {
          i++;
        }
        return "<<<EOT" + i + "\n" + body + "\nEOT" + i;
      } else {
        return "<<<EOT\n" + body + "\nEOT";
      }
    } else {
      return "<<<\n" + body + "\n>>>";
    }
  } else {
    return body;
  }
};

Blueprint = (function() {

  function Blueprint(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      location: null,
      name: null,
      description: null,
      sections: [],
      validations: []
    });
  }

  Blueprint.prototype.resources = function(opts) {
    var r, resources, s, _i, _j, _len, _len1, _ref, _ref1;
    resources = [];
    _ref = this.sections;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      _ref1 = s.resources;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        r = _ref1[_j];
        if ((opts != null ? opts.method : void 0) && opts.method !== r.method) {
          continue;
        }
        if ((opts != null ? opts.url : void 0) && opts.url !== r.url) {
          continue;
        }
        resources.push(r);
      }
    }
    return resources;
  };

  Blueprint.prototype.toJSON = function() {
    var s, v;
    return {
      location: this.location || "",
      name: this.name || "",
      description: this.description || "",
      sections: (function() {
        var _i, _len, _ref, _results;
        _ref = this.sections;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          _results.push(s.toJSON());
        }
        return _results;
      }).call(this),
      validations: (function() {
        var _i, _len, _ref, _results;
        _ref = this.validations;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push(v.toJSON());
        }
        return _results;
      }).call(this)
    };
  };

  Blueprint.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n\n", function(parts) {
      var s, v, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (_this.location) {
        parts.push("HOST: " + _this.location);
      }
      if (_this.name) {
        parts.push("--- " + _this.name + " ---");
      }
      if (_this.description) {
        parts.push("---\n" + _this.description + "\n---");
      }
      _ref = _this.sections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        parts.push(s.toBlueprint());
      }
      if (_this.validations.length > 0) {
        parts.push("-- JSON Schema Validations --");
      }
      _ref1 = _this.validations;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        v = _ref1[_j];
        _results.push(parts.push(v.toBlueprint()));
      }
      return _results;
    });
  };

  return Blueprint;

})();

Section = (function() {

  function Section(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      name: null,
      description: null,
      resources: []
    });
  }

  Section.prototype.toJSON = function() {
    var r;
    return {
      name: this.name || "",
      description: this.description || "",
      resources: (function() {
        var _i, _len, _ref, _results;
        _ref = this.resources;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(r.toJSON());
        }
        return _results;
      }).call(this)
    };
  };

  Section.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n\n", function(parts) {
      var r, _i, _len, _ref, _results;
      if (_this.name) {
        if (_this.description) {
          parts.push("--\n" + _this.name + "\n" + _this.description + "\n--");
        } else {
          parts.push("-- " + _this.name + " --");
        }
      }
      _ref = _this.resources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        _results.push(parts.push(r.toBlueprint()));
      }
      return _results;
    });
  };

  return Section;

})();

Resource = (function() {

  function Resource(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      description: null,
      method: "GET",
      url: "/",
      request: new Request,
      responses: [new Response]
    });
  }

  Resource.prototype.getUrlFragment = function() {
    return "" + (this.method.toLowerCase()) + "-" + (encodeURIComponent(this.url));
  };

  Resource.prototype.toJSON = function() {
    var r;
    return {
      description: this.description || "",
      method: this.method,
      url: this.url,
      request: this.request.toJSON(),
      responses: (function() {
        var _i, _len, _ref, _results;
        _ref = this.responses;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(r.toJSON());
        }
        return _results;
      }).call(this)
    };
  };

  Resource.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n", function(parts) {
      var requestBlueprint, responsesBlueprint;
      if (_this.description) {
        parts.push(_this.description);
      }
      parts.push("" + _this.method + " " + _this.url);
      requestBlueprint = _this.request.toBlueprint();
      if (requestBlueprint !== "") {
        parts.push(requestBlueprint);
      }
      responsesBlueprint = combineParts("\n+++++\n", function(parts) {
        var r, _i, _len, _ref, _results;
        _ref = _this.responses;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(parts.push(r.toBlueprint()));
        }
        return _results;
      });
      return parts.push(responsesBlueprint);
    });
  };

  return Resource;

})();

Request = (function() {

  function Request(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      headers: {},
      body: null
    });
  }

  Request.prototype.toJSON = function() {
    return {
      headers: this.headers,
      body: this.body || ""
    };
  };

  Request.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n", function(parts) {
      var name, value, _ref;
      _ref = _this.headers;
      for (name in _ref) {
        value = _ref[name];
        parts.push("> " + name + ": " + value);
      }
      if (_this.body) {
        return parts.push(escapeBody(_this.body));
      }
    });
  };

  return Request;

})();

Response = (function() {

  function Response(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      status: 200,
      headers: {},
      body: null
    });
  }

  Response.prototype.toJSON = function() {
    var _ref;
    return {
      status: this.status,
      headers: this.headers,
      body: (_ref = this.body) != null ? _ref : ""
    };
  };

  Response.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n", function(parts) {
      var name, value, _ref;
      parts.push("< " + _this.status);
      _ref = _this.headers;
      for (name in _ref) {
        value = _ref[name];
        parts.push("< " + name + ": " + value);
      }
      if (_this.body) {
        return parts.push(escapeBody(_this.body));
      }
    });
  };

  return Response;

})();

JsonSchemaValidation = (function() {

  function JsonSchemaValidation(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      method: "GET",
      url: "/",
      body: null
    });
  }

  JsonSchemaValidation.prototype.toJSON = function() {
    return {
      method: this.method,
      url: this.url,
      body: this.body || ""
    };
  };

  JsonSchemaValidation.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n", function(parts) {
      parts.push("" + _this.method + " " + _this.url);
      if (_this.body) {
        return parts.push(escapeBody(_this.body));
      }
    });
  };

  return JsonSchemaValidation;

})();

module.exports = {
  Blueprint: Blueprint,
  Section: Section,
  Resource: Resource,
  Request: Request,
  Response: Response,
  JsonSchemaValidation: JsonSchemaValidation
};
